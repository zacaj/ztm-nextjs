generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TournamentType {
  FRENZY
  MATCHPLAY
  BEST_GAME
}

model Tournament {
  id   BigInt @id @default(autoincrement())
  name String

  running Boolean @default(false)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  type          TournamentType
  maxPlayers    Int
  gamesPerRound Int            @default(1)

  players Player[]
  games   Game[]
  matches Match[]
}

model Player {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt
  name         String

  ifpa String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  enabled Boolean @default(true)
  deleted Boolean @default(false)

  matches               MatchPlayer[]
  matchPoints           MatchPoints[]
  matchStandings        MatchStandings[]
  matchResultsSubmitted MatchPlayer[]    @relation(name: "submittedBy")
}

model Game {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt
  name         String

  categories String[] @default([])
  enabled    Boolean  @default(true)
  deleted    Boolean  @default(false)

  matches Match[]
}

model Match {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId BigInt?

  created   DateTime  @default(now())
  started   DateTime?
  completed DateTime?

  roundNum    Int?
  gameNum     Int?
  players     MatchPlayer[]
  matchPoints MatchPoints[]
}

model MatchPlayer {
  id       BigInt @id @default(autoincrement())
  match    Match  @relation(fields: [matchId], references: [id])
  matchId  BigInt
  player   Player @relation(fields: [playerId], references: [id])
  playerId BigInt
  order  Int? // 1,2,3,4

  place  Int? // 1,2,3,4
  score  BigInt? // 14,456,340
  points Decimal? // 4-2-1-0

  completed DateTime?

  submittedByPlayer   Player? @relation(fields: [submittedByPlayerId], references: [id], name: "submittedBy")
  submittedByPlayerId BigInt?
  submittedByUser     User?   @relation(fields: [submittedByUserId], references: [id])
  submittedByUserId   String?
}

view MatchPoints {
  tournamentId BigInt
  player       Player @relation(fields: [playerId], references: [id])
  playerId     BigInt
  match        Match  @relation(fields: [matchId], references: [id])
  matchId      BigInt
  points       BigInt
  roundNum     Int?

  @@unique([tournamentId, playerId, matchId])
}

view MatchStandings {
  tournamentId BigInt
  playerId     BigInt
  player       Player @relation(fields: [playerId], references: [id])
  total        BigInt
  rank         BigInt

  @@unique([tournamentId, playerId])
}

model User {
  id                 String        @id @default(uuid())
  sessions           Session[]
  players            Player[]
  createdTournaments Tournament[]
  submittedResults   MatchPlayer[]
}

model Session {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  expiresAt DateTime?
}
