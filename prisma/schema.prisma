generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TournamentType {
  FRENZY
  MATCHPLAY
  BEST_GAME
}

model Tournament {
  id   BigInt @id @default(autoincrement())
  name String

  running Boolean @default(false)

  type          TournamentType
  maxPlayers    Int
  gamesPerRound Int            @default(1)

  players Player[]
  games   Game[]
  matches Match[]
}

model Player {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt
  name         String

  ifpa    String?
  enabled Boolean @default(true)
  deleted Boolean @default(false)

  matches MatchPlayer[]
}

model Game {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt
  name         String

  categories String[] @default([])
  enabled    Boolean  @default(true)
  deleted    Boolean  @default(false)

  matches Match[]
}

model Match {
  id           BigInt     @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId BigInt

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId BigInt?

  started   DateTime  @default(now())
  completed DateTime?

  roundNum Int?
  gameNum  Int?
  players  MatchPlayer[]
}

model MatchPlayer {
  id       BigInt  @id @default(autoincrement())
  match    Match   @relation(fields: [matchId], references: [id])
  matchId  BigInt
  player   Player  @relation(fields: [playerId], references: [id])
  playerId BigInt
  place    Int?
  score    BigInt?
}
